/** *  * Copyright (c) 2010, Michael Creighton * All rights reserved. *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met: *  *     * Redistributions of source code must retain the above copyright notice, *       this list of conditions and the following disclaimer. *  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution. *  *     * Neither the name of the organization nor the names of its * 	  contributors may be used to endorse or promote products *       derived from this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. *  */package com.mikecreighton.util {	import org.casalib.util.NumberUtil;	import flash.display.Graphics;	/**	 * @author Mike Creighton	 */	public class DrawUtil 	{		/**		 * Shorthand method for drawing a rectangle all in one line of code.		 */		public static function drawRect(target : Graphics, startX : Number, startY : Number, width : Number, height : Number, color : uint = 0xFF00FF, alpha : Number = 1) : void 		{			target.beginFill(color, alpha);			target.drawRect(startX, startY, width, height);			target.endFill();		}		public static function drawCheckerboard(target : Graphics, startX : Number, startY : Number, width : Number, height : Number, foreColor : uint, foreAlpha : Number, backColor : uint, backAlpha : Number, checkerSize : Number) : void 		{			var numColumns : int = Math.ceil(width / checkerSize);			var numRows : int = Math.ceil(height / checkerSize);						var drawX : Number;			var boxWidth : Number;			var drawY : Number;			var boxHeight : Number;			var fillColor : int;			var fillAlpha : Number;			for (var y : int = 0;y < numRows;y++) 			{				for (var x : int = 0;x < numColumns;x++) 				{					drawX = startX + x * checkerSize;					boxWidth = checkerSize;					if((drawX - startX) + checkerSize > width) 					{						boxWidth = width - (drawX - startX);					}					drawY = startY + y * checkerSize;					boxHeight = checkerSize;					if((drawY - startY) + checkerSize > height) 					{						boxHeight = height - (drawY - startY);					}					if(NumberUtil.isEven(x)) 					{						fillColor = NumberUtil.isEven(y) ? foreColor : backColor;						fillAlpha = NumberUtil.isEven(y) ? foreAlpha : backAlpha;					} 					else 					{						fillColor = NumberUtil.isEven(y) ? backColor : foreColor;						fillAlpha = NumberUtil.isEven(y) ? backAlpha : foreAlpha;					}					drawRect(target, drawX, drawY, boxWidth, boxHeight, fillColor, fillAlpha);				}			}		}	}}