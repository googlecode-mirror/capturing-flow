/** *  * Copyright (c) 2010, Michael Creighton * All rights reserved. *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met: *  *     * Redistributions of source code must retain the above copyright notice, *       this list of conditions and the following disclaimer. *  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution. *  *     * Neither the name of the organization nor the names of its * 	  contributors may be used to endorse or promote products *       derived from this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. *  */package com.mikecreighton.flow.data {	import com.mikecreighton.flow.events.UpdateEvent;	import org.casalib.events.RemovableEventDispatcher;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	[Event(name="update", type="com.mikecreighton.flow.events.UpdateEvent")]	/**	 * @author Mike Creighton	 */	public class Config extends RemovableEventDispatcher 	{		private static var _instance : Config;		private var _configFile : File;		private var _configXML : XML;		private var _server : String;		private var _port : int;		private var _flowStorageURL : String;		public function Config(enforcer : SingletonEnforcer) 		{			super();						_init();		}		public static function get configFileExists() : Boolean		{			var f : File = File.applicationStorageDirectory.resolvePath('config.xml');			return f.exists;		}		public static function createDefaultConfigFile() : void		{			var f : File = File.applicationStorageDirectory.resolvePath('config.xml');			var fs : FileStream = new FileStream();			fs.open(f, FileMode.APPEND);						var configBase : String = '<?xml version="1.0" encoding="UTF-8"?>\n';			configBase += '<config>\n';			configBase += '\t<tuio server="127.0.0.1" port="3000" />\n';			configBase += '\t<flow_storage url="http://flow/" />\n';			configBase += '</config>';						fs.writeUTFBytes(configBase);			fs.close();		}		private function _init() : void 		{			_configFile = File.applicationStorageDirectory.resolvePath('config.xml');						var fs : FileStream = new FileStream();			fs.open(_configFile, FileMode.READ);			_configXML = new XML(fs.readUTFBytes(fs.bytesAvailable));			fs.close();						server = _configXML..tuio.@server.toString();			port = parseInt(_configXML..tuio.@port.toString(), 10);			flowStorageURL = _configXML..flow_storage.@url.toString();		}		public function updateUserSettingsFile() : void		{			// Take all the current values in our class and save them out.			_configFile.deleteFile();			var fs : FileStream = new FileStream();			fs.open(_configFile, FileMode.APPEND);						var c : String = '<?xml version="1.0" encoding="UTF-8"?>\n';			c += '<config>\n';			c += '\t<tuio server="' + server + '" port="' + port.toString() + '" />\n';			c += '\t<flow_storage url="' + flowStorageURL + '" />\n';			c += '</config>';						fs.writeUTFBytes(c);			fs.close();						dispatchEvent(new UpdateEvent(UpdateEvent.UPDATE, true));		}		/**		 * @return singleton instance of Config		 */		public static function getInstance() : Config 		{			if (Config._instance == null)				Config._instance = new Config(new SingletonEnforcer());			return Config._instance;		}		public function get port() : int 		{			return _port;		}		public function set port(port : int) : void 		{			_port = port;		}		public function get server() : String 		{			return _server;		}		public function set server(server : String) : void 		{			_server = server;		}		public function get flowStorageURL() : String 		{			return _flowStorageURL;		}		public function set flowStorageURL(flowStorageURL : String) : void 		{			_flowStorageURL = flowStorageURL;		}	}}class SingletonEnforcer {}